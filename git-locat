## git本地操作
- 记录历史，管理代码不丢失
- 两人同时修改一个文件
- 拥有分枝管理系统

##分布式
- svn和git区别

- svn(集中式)需要有一台中央服务器，
- git 每个人都会有一完整的版本库,速度快
- svn中每个文件夹都有一个文件.svn文件，git有一个单独的文.git

##配置用户（不配置用户不能提交代码）

##linux

- pwd print working directory

git config --global user.name suxnaidaon
git config --global user.email 1239@qq.com

查看

git config --list

##初始化git init

- 一个项目初始化一次
- 告诉git那个文件夹被git管理
- 删除rm -rf 文件名
- 创建文件夹:mkdir
- 改变路径 cd

- git init 创建一条主分支分枝
- 生成.git文件，但是是隐藏文件 可以用ls -al来查看
- touch 创建文件 cat 查看文件

- git status 查看 Git状态

- 添加到站存区
- git add -A/./文件名
提交

git commit -m "描述"

## git的对比
git diff--本地与暂存区比较
git diff master(分枝名) --本地与历史区比较
git diff cached --暂存区与历史区比较

每次提交都会产生一个版本ID

##撤销

- 从暂存区将将工作内容覆盖掉
```
git checkout ./文件名
```
- 缓存区有一次撤销的机会
git reset HEAD 文件名

(基于以上描述：如果写错了，又不小心提交了，那么先把缓存区回到上一步，再checkout就可以了)

- 如果文件已经提交过一次了，可直接提交到历史区

##回滚历史版本
git reset --hard 版本号
git reflog 查看版本号
git reset --HAED^ 会滚到上个版本

git checkout 版本号 文件名 --回到指定版本号的某个文件

##分枝
- 查看分枝
    - git branch
- 创建分枝
    - git branch 分枝名
- 切换分枝
    - git chekout 分枝名
- 删除分枝
    - git branch -D 分枝名
    - 当前分枝下不能删除自己的所在的分枝
- 创建并切换分枝
    - git checkout -b 分枝名
> 添加文件到历史区之后，两个分枝就没有什么关系了

## 文件修改切换分支
- git stash 分枝有修改不能切换分支，可以暂存更改，暂存使用过渡区覆盖工作区
- git stash pop //

## 合并分支
- git merge 分支名

(流程：先创建一个主干，在主干上创建一个分支，在分支上创建文件，在主干上合并文件)

##echo输入文件内容
- echo hello >> 1.txt//写入
- echo hello > 1.txt//追加

##遇到冲突的时候只能手动解决冲突，然后留下想要的结果，然后再次提交
247  git init
  254  git add .
  255  git commit -m 'init'
  256  ls
  258  git checkout -b dev
  259  vi index.css
  260  git add .
  261  git commit -m 'dev red'
  263  git checkout master
  264  git add .
  265  git commit -m 'master green'
  268  git merge dev
  269  git status
  270  git add .
  271  git commit -m'merge'
  272  git log




